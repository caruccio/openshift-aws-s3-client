#!/usr/bin/env python
#
# This script must be called from env var publish hooks

import sys, os

sys.path.append(os.path.dirname(os.path.dirname(__file__)) + '/lib')

SERVICES = ['s3']

__doc__ = """GetupCloud AWS Client 0.1

Usage:
  aws-store create s3 [--region=<name>]
  aws-store delete s3 [--bucket=<name>]
  aws-store (-h | --help)
  aws-store --version

Options:
  -h --help        Show this screen.
  --version        Show version.
  --region=<name>  Region where to create bucket
  --bucket=<name>  Bucket name do delete

"""

import sys
import os
import base64
import requests
from docopt import docopt

def env_var_add(name, value):
	print "ENV_VAR_ADD: %s=%s" % (name, value)

def url(*trailing):
	base_url = os.environ['AWS_STORE_BASE_URL']
	if not base_url.endswith('/'):
		base_url = base_url + '/'

	if trailing:
		trailing = '/'.join(trailing) + '/'

	return base_url + trailing

def _request(verb, url, secret_token, **kva):
	bearer_token = base64.b64encode('%s:%s' % (os.environ['OPENSHIFT_APP_UUID'], secret_token)).strip()

	insecure = os.environ.get('INSECURE', 'false') == 'true'
	method = getattr(requests, verb)

	if 'params' not in kva:
		kva['params'] = {}

	res = method(url, headers={'Authorization': 'Bearer %s' % bearer_token}, verify=not insecure, **kva)
	if not res.ok:
		raise Exception("Invalid response from server: %i: %s" % (res.status_code, res.text))
	if res.content:
		return res.json()['data']

def post(service, secret_token, **kva):
	return _request('post', url(service), secret_token, **kva)

def delete(service, secret_token, **kva):
	return _request('delete', url(service), secret_token, **kva)

#-----------------------

def create_service(service, secret_token, **params):
	'''Call AWS Store API to create a service and local env vars.
	'''
	data = post(service, secret_token)

	for name, value in data[0].items():
		env_var_add(name, value)

def delete_service(service, secret_token, bucket, **params):
	'''Calls AWS Store API to delete a service.
	'''
	delete('/'.join([service, bucket]), secret_token)

#-----------------------

def _get_service(opts):
	if opts['s3']:
		return 's3'
	raise Exception('Invalid or missing service name')

def _assert_param(opts, name):
	if not hasattr(opts, name):
		raise Exception('Missing parameter: %s' % name)

if __name__ == '__main__':
	opts = docopt(__doc__, version='GetupCloud AWS Client 0.1')

	try:
		secret_token = os.environ['OPENSHIFT_SECRET_TOKEN']
	except KeyError:
		print >>sys.stderr, 'Missing env var OPENSHIFT_SECRET_TOKEN'
		sys.exit(2)

	params = {}
	if '--region' in opts:
		params['region'] = opts['--region']

	try:
		svc = _get_service(opts)
		if opts['create']:
			create_service(svc, secret_token, **params)
		elif opts['delete']:
			delete_service(svc, secret_token, opts['--bucket'])
	except Exception, ex:
		#import inspect
		#print >>sys.stderr, "AWS-S3: Internal error:", ex, inspect.trace()
		import traceback
		print >>sys.stderr, traceback.format_exc()
		sys.exit(3)
